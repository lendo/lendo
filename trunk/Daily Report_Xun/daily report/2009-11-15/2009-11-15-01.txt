1.Java语言完全屏蔽了指针，屏蔽了内存管理，引入了垃圾回收机制。
  写出来的程序在内存上的开销，都不受我们控制。

2.JDK包含有五个部分：核心API，集成API，用户界面API，发布技术还有java虚拟机（JVM）。

  2.1 程序员所写的每一个程序都先运行在虚拟机上，
       所有操作都必须经过虚拟机才能和操作系统交互， 
       这样做不仅统一了所有操作系统，同时也保证了操作系统的安全。 
       要死机的话，死的是虚拟机（JVM）而操作系统并不会受影响，
       而java运行环境指的主要是JVM。
  
 2.2 API(Application Programming Interface):应用程序编程接口。
      指的就是一些已经写好了的类打成的包的集合。
  
 2.3 JDK的发布技术：将.java文件转换成.class文件的一种技术。
 
3.在现在企业级应用中，我们的应用软件一般分为三层， 
  三层分别是表示层，业务逻辑层，数据持久层。
  3.1 表示层：这一层一般在客户端pc机上，最常见的是IE浏览器。
  3.2 业务逻辑层：这一层一般在服务器端，顾名思义，所有业务逻辑处理都在这一层完成， 
                  一般为应用服务器appserver程序管理，还有如IBM的websphere，BEA的weblogic还有tomcat/jboss等。
                  也称为中间层，一种处理业务数据与客户端之间业务逻辑，提供网络服务的服务器端应用软件。
      3.2.1 应用服务器是包括有多个容器（Container）的软件。
              容器从某种意义上说是一个可运行的java写的应用程序，犹如c++/c编译后生成的.exe文件。
      3.2.2 Java开发工具中的容器Container包含有供容器调用的各种Java开发组件。
              组件就是一个应用程序块，如Javabean中的各种提供客户端服务器端交互的类。
              容器按照装载的组件分为如：装ejb组件的ejb容器，装Servlet、JSP组件和静态页面的web容器。
            EJB:Enterprise JavaBean（EJB组件），管理内存中活跃的对象，分配网络中同时发送过来的请求需要处理的对象。
            Servlet:就是web容器中运行的java组件。
                       它的作用是当一个request请求被web容器截获之后，容器分析该请求地址，
                       调用相应的Servlet组件处理后将结果返还给客户端。
            JSP(Java Server Page):JSP将用JavaScript编写的java代码嵌入html代码内部，
                                       然后存成.jsp文件，再由计算机编译生成Servlet储存起来被包含在web容器中。
      3.2.3 应用软件通过网络向appserver发送一个请求的时候。appserver自动找到相应容 
              器中的组件，执行组件中的程序块，把得到结果返还给客户。
            appserver应用服务器主要负责与IE的通信，截获网络上的请求，控制对象数量。
            appserver就是中间件的一种。
      3.2.4 中间件的规范主要有j2ee和.net。.net是属于微软的中间件产品。
            
  3.3 数据持久层：这一层典型的就是数据库，一般也在服务器端， 
             但该服务器一般与装业务逻辑层软件的服务器分开。
             这次主要用于长久保存数据。
             
4.C/S模式：client/server，客户端服务器模式。
  B/S模式：browser/server，浏览器服务器模式。
  
5.Java开发所用的各种规范、标准，本质上也是框架。
  但规范是规范，而框架则是建立在规范之上的一种东西， 
  可以说是标准的延续，或者说是民间的在规范基础上的尝试，总之是这么一个非官方的东西。如果有这种能力，都可以编写一个新框架。
  
6.JCP组织（Java Community Process）:
  Sun公司提倡对Java的开源和共享，同时为了提出更合理的标准，让广大开发者参与进来
  进行标准的制定，而成立的这样一个社区。网址是jcp.org。
  
-------------------------------------------------- Schedule ------------------------------------------------
1.（Q1）CLASSPATH 环境变量有什么用？我没设置，另外 JAVA_HOME 我也没设置。
       只设置了系统变量 PATH 指向的JDK路径。没设置这两个JDK编译运行也能完成，
       会不会有什么影响？
       设置JAVA_HOME，以后你的开发环境对其他的JAVA组件会更通用。
       但是你也可以不配置，因为在PATH中加入了JDK的安装目录\bin。
       系统就已经能够自动找到bin下面的所有命令。
       
      -----------------------lendo.du------------------------
      Classpath是在你的程序需要用的别人开发好的第三方包的时候，你需要把这个
       第三方包的文件位置放到classpath里面去，你的程序在编译的时候才能找到这
       些第三方包，classpath里面配置的是你的程序要编译和运行的依赖环境。
       注意这里不是配置Java的编译和运行环境，而是你代码里面的其他类的依赖环境。
       如果你现在不懂，你把这个问题保留，我过来会给你演示。
       ***************************************************
        你的回复：恩，演示了我可能就清楚些了。
                 听丹哥这么说，我有点把JAVA_HOME和CLASSPATH有点分不清了。
       ***************************************************
        这个问题你没有搞清楚，所以应该放到这里来。
      -----------------------lendo.du------------------------
      

2.（Q1）书中p39讲的通过运用2的冥次方的&运算可以将其他位屏蔽掉，
        只保留其中的某一位。对这句话，我不是很理解，如果可以的话
        还是想让丹哥演示下。  
        
   （Q2）书中讲的位运算，和>>>用0填充高位；>>用符号位填充高位。
         像这些用得多吗？有必要的话，最好丹哥也帮我演示下。     
        
3.（Q1）对书中讲的文件输入与输出这节，不清楚。
        书中讲的对文件进行读取时，代码为：Scanner in = new Scanner(new File("myfile.txt"));
        另外写入文件时，构造的PrintWriter对象。
        我通过编写代码试过，老出错，也不清楚原因，对这部分基本上都不明白。
        网上查了下资料，也是理论，没示例，最好丹哥来演示吧，顺便我再去网络上了解下。
        
4.（Q1）对switch语句的case标签该怎么表示不是很清楚。

5.（Q1）在用3元操作符 ？： 编了程序后，无法编译成功，提示“这不是语句”，
        用条件语句修改了之后，出现布尔类型和整型的冲突。不知道这个3元
        操作符该怎么用。
        
  （Q2）位运算符的使用也不是很明白，在哪种情况下用，怎么用，不清楚。
        仅知道它用于数值在位表示下参与的运算，返回不是1就是0。
        
  （Q3）我在编写使用数学类的方法后，编译时出错，它说找不到符号，位置
        在类Math，是不是我这个jdk没有Math类？但我想不可能啊，具体原因
        我就不清楚了。
        
  （Q4）在通过找到代码点，打印输出这个代码点位置的字符时，我的代码是这样：
        int cp = greeting.codePointAt(5);
        char five = greeting.charAt(cp-1);
        System.out.println(five);
        程序出错，说String字符串超出范围，不懂怎么回事。 
        
  （Q5）按照书中所讲的构建字符串，我编写了程序希望把两个字符串组合在一起
        可是没有成功。编写代码为：
        public class Builder
        {
            public static void main(String[] args)
            {
                String war = "魔兽世界";
                StringBuilder builder = new StringBuilder(war);
                builder.append(Warcraft);
                builder.append(World);
                String completedString = builder.toString();
                System.out.println(completedString);
            }
        }
      
      我对这个通过构建器修改字符串的方法还是不太了解。我想把英文的加在
      中文后，实现的方法不清楚。
       
         
  

  