1.如果一个方法没有被覆盖并且很短，编译器就能够对它进行优化处理，
  这个过程称为内联（inlining）。
  
2.一个对象在进行类型转换之前，最好先查看一下是否能够成功地转换。
  可以使用instanceof运算符实现。例如：
  if (staff[1] instanceof Manager){
      boss = (Manager) staff[1];
      ...
  }
  如果编译成功，那么可以进行转换。
  如果两个类之间不相关，那么不能转换。如：Date c = (Date) staff[1];
  所以：
  1.只能在继承层次内进行类型转换。
  2.在将超类转换成子类之前，应该使用instanceof进行检查。
  需要注意：一般来说，应该尽量少用类型转换和instanceof运算符。
  
3.如果一个类，更具有通用性，仅在这个类中声明方法，而不去定义实现，那么
  这个方法需要声明为abstract，而且这个类也是abstract抽象类。
  抽象方法的具体实现在子类中。
  抽象类不能被实例化。就是说，如果将一个类声明为abstract，就不能创建
  这个类的对象。但是可以定义一个抽象类的变量，引用非抽象子类的对象。
  如： Person p = new Student("Vince Vu","Economics");
  
4.人们希望超类中的某些方法允许被子类访问，或允许子类的方法访问超类的
  某个域，所以，需要将这些方法或域声明为protected。
  方法被声明为protected之后，那么表明子类得到信任，可以使用这个方法，
  而其他类则不行。
  
5.Java用于控制可见性的4个访问修饰符：
  （1）仅对本类可见-----private。
  （2）对所有类可见-----public。
  （3）对本包和所有子类可见-----protected。
  （4）对本包可见-----默认，默认即是指没有标明任何修饰符的情况，（这是一种不太受欢迎的形式）。
  
 -------------------------------------------------- Schedule ------------------------------------------------ 
















