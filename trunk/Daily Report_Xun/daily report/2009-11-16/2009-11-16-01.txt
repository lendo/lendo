1.面向对象程序设计，简称OOP（Object Oriented Programming）。
  1.1 面向对象程序是由对象组成，对象包含对用户公开的一些功能和封装的实现部分。
  1.2 结构化程序设计的模式组成为：算法 + 数据结构 = 程序。算法在第一位，数据结构在第二位。
      OPP相反，数据第一位，操作数据的算法第二位。
      OPP把问题分成几个大类，每个大类再往下细分。模块与模块之间功能、关系更明确。
       所以OPP适合解决规模更大的问题。
       
2.类是构造对象的模板或蓝图，框架。
  由类构造（construst）对象的过程称为创建类的实例（instance）。
  
3.封装是将数据和行为（方法）组合在一个包中，对对象的使用者隐藏了数据实现方式。
  一个类中的方法不能直接地访问其他类的实例域。
  对象中的数据称为实例域，数据表示的范围。
  操纵数据的过程称为方法。
  实例域值的集合是对象的当前状态（属性）。
  
4.对已有类的扩展为子类，包含了父类的全部属性和方法，并且在父类基础上
  还能实现其他特定功能，这种方式为继承。
  
5.对象的3个主要特性为：
  对象的行为（behavior）：可以被对象调用的方法，操作。
  对象的状态（state）：当施加方法后，对象怎么响应。
  对象的标识（identity）：区别具有相同行为和状态的不同对象。
  对象状态的改变是通过调用相应方法实现的。
  对象的标识（属性值）永远是不同的，状态也会存在差异。
  对象这些特性之间是相互影响的。
  
6.类为名词，方法为动词。（目前可以套，但这是种较粗略的原则）。

7.类之间的关系有：
  依赖（uses-a）:一个类的方法可以操作另一个类的对象。（尽量减少这种关系）。
  聚合（has-a）:类A的对象包含类B的对象。
  继承（is-a）：类A从类B扩展来，不但包含类B的方法，还有额外功能。
  
8.要想使用对象，首先要构造对象，再进行初始化，最后对对象施加方法。

9.Java语言中，使用构造器（constructor）构造新实例并初始化。
  构造器的名字与类名相同。
  如果要构造一个对象，需要在构造器前面加 new 操作符。
  构造的对象如果要使用多次，可将构造的对象存放在变量中。
  构造器定义的变量如果没有引用任何对象，是不能调用相应对象的方法的。需要用新构造的对象初始化。
  将方法应用在值为null的对象变量上，就会产生运行错误。
  
10.实现日历表示法的类为GregorianCalendar类。
   GregorianCalendar类表示月份是从0开始计数。最好使用常量，如：Calendar.DECEMBER。
   
11.对实例域做出修改的方法被称为更改器方法（mutator method）。如 set。
   仅访问实例域而不进行修改的方法称为访问器方法（accessor method）。如 get。
   
12.在一个源文件中，只能有一个公有类，但可以有任意数目的非公有类，也可以自己定义。
   源文件中有公有类，以及自己定义的其他类时，编译器编译后将创建多个类文件。
   一个类的定义包括构造器，方法和实例域。
   
13.如果将多个类分别放在不同源文件中时，有两种编译源程序的方法：
   第一种是使用通配符，如：两个源文件名称为Employee.java和EmployeeTest.java。
   可以用编译命令： javac Employee*.java 。
   第二种是用包含公有类的源文件名直接键入命令： javac EmployeeTest.java 。
   这样，当编译器发现公有类使用了其他类时，会自动查找相应类文件。
   如果没有类文件就查找源文件并进行编译，并且如果源文件版本比相应类文件新，
   会重新编译新的源文件。
   
14.在另外定义的类中定义的方法都标记为public。意味着其他任何类，包括任何类
   的方法都可以调用这个方法。
   
15.实例域的对象被标记为private。这样只有这个类自身定义的方法可以访问或更改实例域。

16.类通常包括类型属于某个类的实例域。如：private String name ，
   name是String类的对象，name又是整个程序，公有类的实例域。
  
17.构造器与类同命。
   在构造类的对象时，构造器运行，并初始化实例域（初始化对象）。
   构造器的调用前面需要加上new 操作符。
  
-------------------------------------------------- Schedule ------------------------------------------------
1.（Q1）CLASSPATH 环境变量有什么用？我没设置，另外 JAVA_HOME 我也没设置。
       只设置了系统变量 PATH 指向的JDK路径。没设置这两个JDK编译运行也能完成，
       会不会有什么影响？
       设置JAVA_HOME，以后你的开发环境对其他的JAVA组件会更通用。
       但是你也可以不配置，因为在PATH中加入了JDK的安装目录\bin。
       系统就已经能够自动找到bin下面的所有命令。
       
      -----------------------lendo.du------------------------
      Classpath是在你的程序需要用的别人开发好的第三方包的时候，你需要把这个
       第三方包的文件位置放到classpath里面去，你的程序在编译的时候才能找到这
       些第三方包，classpath里面配置的是你的程序要编译和运行的依赖环境。
       注意这里不是配置Java的编译和运行环境，而是你代码里面的其他类的依赖环境。
       如果你现在不懂，你把这个问题保留，我过来会给你演示。
       ***************************************************
        你的回复：恩，演示了我可能就清楚些了。
                 听丹哥这么说，我有点把JAVA_HOME和CLASSPATH有点分不清了。
       ***************************************************
        这个问题你没有搞清楚，所以应该放到这里来。
      -----------------------lendo.du------------------------
      

2.（Q1）书中p39讲的通过运用2的冥次方的&运算可以将其他位屏蔽掉，
        只保留其中的某一位。对这句话，我不是很理解，如果可以的话
        还是想让丹哥演示下。  
        
   （Q2）书中讲的位运算，和>>>用0填充高位；>>用符号位填充高位。
         像这些用得多吗？有必要的话，最好丹哥也帮我演示下。
         
   （Q3）位运算符的使用也不是很明白，在哪种情况下用，怎么用，不清楚。
        仅知道它用于数值在位表示下参与的运算，返回不是1就是0。     
        
3.（Q1）对书中讲的文件输入与输出这节，不清楚。
        书中讲的对文件进行读取时，代码为：Scanner in = new Scanner(new File("myfile.txt"));
        另外写入文件时，构造的PrintWriter对象。
        我通过编写代码试过，老出错，也不清楚原因，对这部分基本上都不明白。
        网上查了下资料，也是理论，没示例，最好丹哥来演示吧，顺便我再去网络上了解下。
        
4.（Q1）对switch语句的case标签该怎么表示不是很清楚。

5.（Q1）在用3元操作符 ？： 编了程序后，无法编译成功，提示“这不是语句”，
        用条件语句修改了之后，出现布尔类型和整型的冲突。不知道这个3元
        操作符该怎么用。
                
  （Q2）我在编写使用数学类的方法后，编译时出错，它说找不到符号，位置
        在类Math，是不是我这个jdk没有Math类？但我想不可能啊，具体原因
        我就不清楚了。
        
  （Q3）在通过找到代码点，打印输出这个代码点位置的字符时，我的代码是这样：
        int cp = greeting.codePointAt(5);
        char five = greeting.charAt(cp-1);
        System.out.println(five);
        程序出错，说String字符串超出范围，不懂怎么回事。 
        
  （Q4）按照书中所讲的构建字符串，我编写了程序希望把两个字符串组合在一起
        可是没有成功。编写代码为：
        public class Builder
        {
            public static void main(String[] args)
            {
                String war = "魔兽世界";
                StringBuilder builder = new StringBuilder(war);
                builder.append(Warcraft);
                builder.append(World);
                String completedString = builder.toString();
                System.out.println(completedString);
            }
        }
      
      我对这个通过构建器修改字符串的方法还是不太了解。我想把英文的加在
      中文后，实现的方法不清楚。
       
         
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
      