1.值调用（call by value）表示方法调用的是一个数值参数。
  引用调用表示方法调用的是一个变量的引用，对应着引用的地址。
  而对象可以通过方法修改。而如果方法的参数是基本数据类型定义，
  则不能引用对象来改变对象，修改的只是一个对象的拷贝，而不是对象
  的引用。
  如果方法要进行引用调用来改变对象，那么所引用的应该是指向内存地址
  的对象，如果是拷贝，那么拷贝和引用都要指向同一个地址。这样才能使
  对象状态改变。
  
2.构造器方法的名字相同，但参数有很多种形式，那么这种情况属于构造器
  方法的重载。
  编译器在执行这种可以重载的方法时，它会去寻找与参数类型（即签名）匹配
  的一种方法去实现。这种情况就是重载解析。
  
3.如果构造器没有显式的给实例域赋予初值，那么对象就被赋值为默认值。
  数值类型赋值0，布尔类型赋值为false，用类对象定义的对象变量的引用
  就被赋值为null。
  最好在构造器显示的赋予初值，少使用默认值，这是一种良好的编程习惯，
  增加代码的可读性。
  
4.如果在编写一个类时，没有编写构造器，那么Java系统会给这个类提供一个
  拥有上述默认值的默认构造器。但是，如果在类中定义了一个构造器，那么
  就不能使用默认构造器来初始化对象，必须按照定义的构造器方法写上对应
  参数。
  
5.在构造类时，可以显式的初始化实例域，可以对实例域赋值或者可以通过方法
  对实例域赋值，实例域赋值后那么就是一个对象的缺省默认值。由于构造器具有
  重载的功能，所以可以用不同的方式用构造器构造对象，得到的对象既可以是
  一个具有完整参数的对象，又可以是一个具有默认参数的对象。
  
6.在定义构造器时，构造器的参数可以与实例域变量命名相同，可以在构造器的实现中
  使用关键字 this.parameter 来引用实例域定义的变量。这样使构造器的定义
  阅读起来更加清晰。

7.this关键字的另外一个作用就是可以调用其他定义的公共构造器。在一个类中定义了
  另外一个构造器用 this 关键字调用公共构造器实现后，那么在用这个构造器构造
  对象时，参数可以直接填写需要这个构造器来实现的参数，并且构造的对象同时被初始化
  为具有公共构造器对象具有的状态。这个我想有点使构造器的定义具有继承的特点。
  
8.在一个类的定义中，用一对花括号{}包含起来的部分叫做类的初始化块。在构造器
  构造一个对象时，首先把对象的所有数据域初始化为默认值，然后执行实例域的显式
  初始化赋值和初始化块，最后依照类定义的顺序依次往下执行。如果对静态域的初始化
  逻辑比较复杂，静态域的初始化可以用静态的初始化块来初始化。只需要在初始化块
  的上面一行加上关键字 static。  
  
  







-------------------------------------------------- Schedule ------------------------------------------------
1.(Q1)








  
  
  
  
  
  
  
  
  
  